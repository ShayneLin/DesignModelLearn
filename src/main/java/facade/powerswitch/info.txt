通过外观模式实现电源总开关实例，开关控制了各种各样的电器。每个电器都是个子系统。

所有的系统都有共同的方法on和off控制着开和关:
	AirCOnditioner是空调子系统
	Fan是风扇子系统
	Light是电灯子系统
	Television是电视子系统

GeneralSwitchFacade是外观类也是总开关类。同样有着on和off方法。
 	 细想一下：在这个外观类里的on和off其实包含了多个子系统的调用，但是客户端只是调用
   我外观类的on或者off就能实现了，实现的对具体操作的封装，使用户看起来好像只做了一件事
GeneralSwithFacade类依赖于所有的子系统。   

调用的流程：
   1.创建外观类facade
   2.通过调用facade的on和off将所有的子系统打开或者关闭。
   3.结束。
   
其他的应用实例：实现文件的加密
	例如一个文件加密需要有三个操作：读取源文件，加密，保存加密后的文件。
那么就可以提供一个统一的加密外观类。  
  
适用的环境：
   1.要为一个复杂的子系统提供一个简单的接口是时可以使用外观模式。
   2.客户程序与多个子系统之间存在很大的依赖性。
   
优点：
   1.对客户屏蔽了系统组件，减少客户处理的对象数目并且使得子系统更加容易使用。
   2.实现子系统和客户之间的松耦合关系。
   3.只提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。
   
缺点：
   1.不能很好的限制客户使用子系统类
   2.再不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类的源码，违反开闭原则。