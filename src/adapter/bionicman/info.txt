使用设配器模式实现仿生机器人

Robot目标抽象类（机器人接口）
     +cry()
     +move()

     
Dog类是适配者类
     +wang()
     +run()
DogAdapter类是适配器类，继承自Dog并且实现了Robot接口
 -分析：1.继承Dog是为了获得Dog的wang()和run()
      2.实现Robot是提供给客户端调用的方法，简单说这是适配器的本质，用户只知道Robot的
      API
      3.这种适配器模式被称为类适配器，因为通过继承而获得适配者的方法。

Cat类是适配者类
     +miao()
     +run()   
CatAdapter类是适配器类 ，实现了Robot接口
      分析：1.在CatAdapter是通过关联关系关联一个Cat对象从何获得Cat的操作。
      2.可以通过构造或者属性注入，或者直接在构造中直接创建对象
      3.这种适配器模式被称为对象适配器模式，因为通过关联对象来获得适配者的方法。
      
调用的流程：
    1.创建CatAdapter和DogAdpater对象
    2.调用cry()和move()方法
    3.结束
    
适用的环境：
   1.系统需要使用现有的类而这些类的接口不符合系统的需要
   2.想要建立一个可以重复使用的类，用于与一些彼此之间没有
        太大关联的一些类，包括一些捡来可能引进的类。
    
优点：
    1.将目标类和适配者类解耦，通过引入一个适配器类来实现重用现有的所有适配者类。
    2.增加类的透明性和复用性，将具体的实现封装在适配者类中。
    3.灵活性和拓展性很好，完全符合开闭原则。
    
！！！仔细的看一看两种模式的优缺点的区别：
类适配器的缺点：一次最多适配一个适配者类，而且目标抽象类只能为接口，不能为类，不能将一个
适配者类和它的子类同时适配到目标接口。（Java的单继承）

对象适配器模式的优点还有：对象适配器可以把多个不同的适配者适配到同一个目标，也就是说
同一个适配器可以吧适配者类和它的子类都适配到目标接口。
对象适配器模式的缺点：想要置换适配者类的方法就不容易。


拓展： 
1. 默认适配器：默认适配器类使用空方法。很多的Adapter都是这样的
具体实现类（有选择的实现某些方法）-》默认适配器类（实现接口，却只是空方法（或者说是钩子方法））-》适配者接口（有许多的方法）


